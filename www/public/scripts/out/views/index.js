// Generated by CoffeeScript 1.4.0
(function() {

  client.views.index = Backbone.View.extend({
    build: function() {
      var that, thisYear;
      that = this;
      thisYear = Date.today().getFullYear();
      return [
        '#page-index', [
          [
            '.container', [
              [
                '.events', _.range(thisYear, thisYear + 5).map(function(year) {
                  return new client.partials.Year({
                    model: new Backbone.Model({
                      year: year,
                      events: that.model.get('events')
                    })
                  });
                })
              ]
            ]
          ]
        ]
      ];
    }
  });

  client.partials.Year = Backbone.View.extend({
    build: function() {
      var that, thisYearsEvents;
      that = this;
      thisYearsEvents = this.model.get('events').filter(function(event) {
        return Date.parse(event.start).getFullYear() === that.model.get('year');
      });
      return [
        '.year', _.range(12).map(function(month) {
          return new client.partials.Month({
            model: new Backbone.Model({
              month: month,
              events: thisYearsEvents
            })
          });
        })
      ];
    }
  });

  client.partials.Month = Backbone.View.extend({
    tagName: 'span',
    build: function() {
      var that, thisMonthsEvents;
      that = this;
      thisMonthsEvents = this.model.get('events').filter(function(event) {
        return Date.parse(event.start).getMonth() === that.model.get('month');
      });
      return [
        '.month', thisMonthsEvents.map(function(event) {
          return new client.partials.Event({
            model: new Backbone.Model(event)
          });
        })
      ];
    }
  });

  client.partials.Event = Backbone.View.extend({
    build: function() {
      var cssClass, days, endDate, endOfMonth, left, pastClass, startDate, title, typeClass, width;
      startDate = Date.parse(this.model.get('start'));
      endDate = Date.parse(this.model.get('end'));
      endOfMonth = startDate.clone().moveToLastDayOfMonth();
      days = new TimeSpan(endDate - startDate).days + 1;
      left = (startDate.getDate() - 1) / endOfMonth.getDate() * 100;
      width = days / endOfMonth.getDate() * 100;
      typeClass = 'event-type-' + this.model.get('type').toLowerCase().replace(' ', '-');
      pastClass = Date.today().compareTo(endDate) > 0 ? 'past' : '';
      cssClass = typeClass + ' ' + pastClass;
      title = this.model.has('cost') ? '{0} (${1})'.supplant([this.model.get('title'), this.model.get('cost')]) : this.model.get('title');
      return [
        '.event', {
          'class': cssClass,
          style: 'margin-left: {0}%; width: {1}%'.supplant([left, width])
        }, [['.details', [['.title', title], ['.date', '{0} to {1}'.supplant([this.model.get('start'), this.model.get('end')])]]]]
      ];
    }
  });

}).call(this);
